openapi: 3.0.0
info:
  title: API TDP
  version: 1.0.0
  description: Documentation API TDP avec Swagger
servers:
  - url: http://localhost:3333
    description: Serveur TDP
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
security:
  - bearerAuth: []
paths:
  /register:
    post:
      tags:
        - Auth
      summary: Inscription d'un utilisateur
      description: Permet de s'inscrire depuis le site web
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - full_name
                - username
                - role
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                full_name:
                  type: string
                username:
                  type: string
                role:
                  type: string
      responses:
        "201":
          description: Utilisateur créé avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: "#/components/schemas/User"
        "400":
          description: Erreur de validation ou autre
  /login:
    post:
      tags:
        - Auth
      summary: Connexion d'un utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        "200":
          description: Connexion réussie
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: "#/components/schemas/User"
        "401":
          description: Identifiants invalides
  /logout:
    post:
      tags:
        - Auth
      summary: Déconnexion d'un utilisateur
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Déconnexion réussie
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: Non autorisé - utilisateur non authentifié
        "500":
          description: Erreur serveur
  /cycles:
    get:
      tags:
        - Cycles
      summary: Récupérer tous les cycles
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Liste des cycles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Cycle"
        "401":
          description: Non autorisé
    post:
      tags:
        - Cycles
      summary: Créer un nouveau cycle
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tontineId
                - startDate
                - endDate
              properties:
                tontineId:
                  type: integer
                startDate:
                  type: string
                  format: date
                endDate:
                  type: string
                  format: date
      responses:
        "201":
          description: Cycle créé avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cycle"
        "400":
          description: Erreur de validation
        "401":
          description: Non autorisé
  "/cycles/{id}":
    get:
      tags:
        - Cycles
      summary: Voir un cycle spécifique
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Détails du cycle
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cycle"
        "401":
          description: Non autorisé
        "404":
          description: Cycle non trouvé
  /tontine-memberships:
    get:
      tags:
        - TontineMemberships
      summary: Liste des adhésions aux tontines
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Liste récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TontineMembership"
        "500":
          description: Erreur serveur
    post:
      tags:
        - TontineMemberships
      summary: Ajouter un membre à une tontine
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - tontineId
                - roleId
              properties:
                userId:
                  type: integer
                tontineId:
                  type: integer
                roleId:
                  type: integer
      responses:
        "201":
          description: Membre ajouté avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TontineMembership"
        "400":
          description: Données invalides
  "/tontine-memberships/{id}":
    put:
      tags:
        - TontineMemberships
      summary: Modifier le rôle d'un membre
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roleId
              properties:
                roleId:
                  type: integer
      responses:
        "200":
          description: Rôle mis à jour avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TontineMembership"
        "404":
          description: Membre non trouvé
    delete:
      tags:
        - TontineMemberships
      summary: Supprimer un membre d'une tontine
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Membre retiré
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "404":
          description: Membre non trouvé
  /payments:
    get:
      tags:
        - Payments
      summary: Liste de tous les paiements
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Paiements récupérés avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Payment"
        "500":
          description: Erreur serveur
    post:
      tags:
        - Payments
      summary: Créer un paiement
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - cycleId
                - amount
                - paymentDate
              properties:
                userId:
                  type: integer
                cycleId:
                  type: integer
                amount:
                  type: number
                paymentDate:
                  type: string
                  format: date
      responses:
        "201":
          description: Paiement créé avec succès
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
        "400":
          description: Erreur de validation ou données manquantes
  "/payments/{id}":
    get:
      tags:
        - Payments
      summary: Obtenir les détails d’un paiement
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Paiement trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Payment"
        "404":
          description: Paiement non trouvé
  /roles:
    get:
      tags:
        - Roles
      summary: Lister tous les rôles
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Liste des rôles récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
        "500":
          description: Erreur serveur
  "/roles/{id}":
    get:
      tags:
        - Roles
      summary: Obtenir un rôle spécifique
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Rôle trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        "404":
          description: Rôle non trouvé
  /memberships:
    get:
      summary: Voir tous les rôles d’un utilisateur
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: user_id
          schema:
            type: integer
          description: Filtrer par ID utilisateur
      responses:
        "200":
          description: Liste des rôles
        "401":
          description: Non autorisé
        "500":
          description: Erreur serveur
    post:
      summary: Assigner un rôle à un utilisateur dans une tontine
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                tontine_id:
                  type: integer
                role_id:
                  type: integer
      responses:
        "201":
          description: Rôle assigné
        "400":
          description: Données invalides ou membre existant
        "401":
          description: Non autorisé
        "500":
          description: Erreur serveur
  "/memberships-role/{userId}/{tontineId}":
    get:
      summary: Voir le rôle d’un utilisateur dans une tontine
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
        - in: path
          name: tontineId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Détails du rôle
        "401":
          description: Non autorisé
        "404":
          description: Non trouvé
        "500":
          description: Erreur serveur
  "/membership/{userId}/{tontineId}":
    delete:
      summary: Retirer un utilisateur de la tontine
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
        - in: path
          name: tontineId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Utilisateur retiré
        "401":
          description: Non autorisé
        "404":
          description: Membre non trouvé
        "500":
          description: Erreur serveur
  /tontines:
    get:
      tags:
        - Tontines
      summary: Liste des tontines
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Liste récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items: null
        "401":
          description: Non autorisé
    post:
      tags:
        - Tontines
      summary: Créer une tontine
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - startDate
              properties:
                name:
                  type: string
                description:
                  type: string
                startDate:
                  type: string
                  format: date
      responses:
        "201":
          description: Tontine créée avec succès
          content:
            application/json:
              ? schema
        "400":
          description: Erreur de validation
        "401":
          description: Non autorisé
  "/tontines/{id}":
    get:
      tags:
        - Tontines
      summary: Détails d'une tontine
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Tontine trouvée
          content:
            application/json:
              ? schema
        "401":
          description: Non autorisé
        "404":
          description: Tontine non trouvée
    put:
      tags:
        - Tontines
      summary: Mettre à jour une tontine
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        "200":
          description: Tontine mise à jour
          content:
            application/json:
              ? schema
        "400":
          description: Erreur de validation
        "401":
          description: Non autorisé
        "404":
          description: Tontine non trouvée
    delete:
      tags:
        - Tontines
      summary: Supprimer une tontine
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Tontine supprimée
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "401":
          description: Non autorisé
        "404":
          description: Tontine non trouvée
  /transaction-logs:
    get:
      tags:
        - TransactionLogs
      summary: Liste des logs de transaction
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Liste des logs récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TransactionLog"
        "401":
          description: Non autorisé
        "500":
          description: Erreur interne du serveur
  "/transaction-logs/{id}":
    get:
      tags:
        - TransactionLogs
      summary: Détails d'un log de transaction
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Log trouvé
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionLog"
        "401":
          description: Non autorisé
        "404":
          description: Log non trouvé
  /users:
    get:
      tags:
        - Users
      summary: Liste de tous les utilisateurs
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Liste des utilisateurs
          content:
            application/json:
              schema:
                type: array
                items: null
        "401":
          description: Non autorisé
        "500":
          description: Erreur serveur
  "/users/{id}":
    get:
      tags:
        - Users
      summary: Récupérer un utilisateur par ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Utilisateur trouvé
          content:
            application/json:
              ? schema
        "401":
          description: Non autorisé
        "404":
          description: Utilisateur non trouvé
    put:
      tags:
        - Users
      summary: Mettre à jour un utilisateur
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                username:
                  type: string
      responses:
        "200":
          description: Utilisateur mis à jour
          content:
            application/json:
              ? schema
        "400":
          description: Requête invalide
        "404":
          description: Utilisateur non trouvé
  /users/deactivate:
    post:
      tags:
        - Users
      summary: Désactiver le compte utilisateur connecté
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Compte désactivé avec succès
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user: null
        "401":
          description: Non autorisé
        "500":
          description: Erreur serveur
tags: []
